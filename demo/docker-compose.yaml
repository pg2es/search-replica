version: "3"
services:
  postgres:
    image: postgres:14-alpine # 13+
    container_name: pg2es-postgres
    ports:
      - "5432:5432"
    expose:
      - "5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust # allows anyone to connect without a password, even if one is set 
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    hostname: "postgres"
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./data/:/data/:ro
      # Initialization scripts. See: https://hub.docker.com/_/postgres/
      - ./schema.sql:/docker-entrypoint-initdb.d/00-schema.sql:ro 
      - ./import.sql:/docker-entrypoint-initdb.d/01-import.sql:ro
    networks:
      - crossconnect
  pgadmin:
    container_name: pg2es-pgadmin
    image: dpage/pgadmin4:6
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: demo@demo.com
      PGADMIN_DEFAULT_PASSWORD: demo
      PGADMIN_CONFIG_SERVER_MODE: "False"              # python value
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False" # python value
    volumes:
       - ./pgadmin/servers.json:/pgadmin4/servers.json # preconfigured servers/connections
       - ./pgadmin/pgpass:/pgpass # passwords for the connections in this file
    networks:
      - crossconnect
    ports: # expose
      - "8081:80"
  searchui:
    image: cars10/elasticvue:0.40.1
    container_name: pg2es-search-ui
    ports:
      - 8080:8080
    depends_on:
      - elasticsearch
    networks:
      - crossconnect

    # Elasticsearch Docker Images: https://www.docker.elastic.co/
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2  # 7.10 is latest, where OpenSearch & ElasticSearch were compatible.
    container_name: pg2es-elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: 'false'
      xpack.monitoring.enabled: 'false'
      http.cors.enabled : 'true'
      http.cors.allow-origin : '*'
      http.cors.allow-methods : OPTIONS, HEAD, GET, POST, PUT, DELETE
      http.cors.allow-headers : X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
    ulimits:
      memlock: {soft: -1, hard: -1}
      nofile: {soft: 65536, hard: 65536}
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks: 
      - crossconnect
        
  searchsetup:
    image: curlimages/curl
    container_name: pg2es-searchsetup
    depends_on:
      - elasticsearch
    networks: 
      - crossconnect
    restart: "on-failure"
    command: >-
      curl -X PUT -k -H 'Content-Type: application/json' -d @/tmp/postgres.json http://elasticsearch:9200/postgres
    volumes:
      - ./mapping.json:/tmp/postgres.json:ro
  search-replica:
    build: ../
    image: pg2es/search-replica:latest
    container_name: pg2es-search-replica
    restart: "on-failure"
    networks:
      - crossconnect
    depends_on:
      - elasticsearch
      - searchsetup
      - postgres
    environment:
      PGHOST: postgres
      PGPORT: "5432"
      PGDATABASE: postgres
      PGUSER: postgres
      PGPASSWORD: password
      PG_PUBLICATION: search
      SEARCH_HOST: "http://elasticsearch:9200"
      SEARCH_BULK_SIZE: 4
      SEARCH_PUSH_INTERVAL: 1s
      LOG_LEVEL: "debug"
      LOG_FORMAT: "cli"
    entrypoint: ["/bin/pg2es", "-recreate", "-reindex"]

volumes:
  elasticsearch-data:
    driver: local
  postgres-data:
    driver: local
networks:
  crossconnect:
    driver: bridge
